c
e
c
@return_value
e
q
e
q
e
c
cc
c
q
@return_value[:PlacementSeq].placement << Placement.new(
        id: placement[:id],
        creative: creative_for_for_placement(CurrencyConverter.call(from_currency: placement['currency'], to_currency: 'EURO', amount: placement['floor']))
      )
@return_value[:PlacementSeq].placements << Placement.new(
        id: placement[:id],
        creative: creative_for_for_placement(CurrencyConverter.call(from_currency: placement['currency'], to_currency: 'EURO', amount: placement['floor']))
      )
c
e
@return_value
c
PlacementSeq.new(@return_value)
PlacementSeq.new(@return_value[:PlacementSeq])
@return_value
c
e
c
@parsed_data[:placements]
@parsed_data.try(:placements)
@parsed_data
c
q
 @file_path
File.file?( @file_path)
content
n
@file_path
c
@file_path
content = @file_path && File.file?( @file_path) ? File.read(@file_path) : @file
c
$ex
n
q
$ex
c
e
c
content = @file_path && File.file?( @file_path) ? File.read(@file_path) : @file
q
@file_path
File.file?( @file_path) 
content = @file_path && File.file?( @file_path) ? File.read(@file_path) : @file
    @xml_content = Hash.from_xml content
@file_path
c
args
q
@type
@payload
InputToHashProcessor.call(@type.to_sym => @payload)
@parsed_data
@parsed_data.try(:placements)
q
e
c
$ex
q
c
$ex
c
q
y
cq
c
CONVERSION_RATES_TO_EURO[@from_currency.to_sym] 
CONVERSION_RATES_TO_EURO[@from_currency] 
@amount
@amoun
(@amount / conversion_rate).round(2)
@from_currency
c
(@return_value * conversion_rate).round(2)
c
(@amount / conversion_rate).round(2)
c
n
c
@return_value
c
q
c
@amount.to_f
@amount.to_i
(@amount/conversion_rate).round(2)
(@amount / conversion_rate).round(2)
@amount
n
@from_currency
CONVERSION_RATES_TO_EURO[@from_currency]
c
q
@return_value[:creatives]
n
c
@return_value[:creatives] = @xml_content['data']['Creatives']['Creative']
   &.map { |hsh| hsh['conversion_amount'] = CurrencyConverter.call(from_currency: hsh['currency'], to_currency: 'EURO', amount: hsh['price']) }
c
$ex
c
CONVERSION_RATES_TO_EURO[@f
CONVERSION_RATES_TO_EURO[@from_currency.to_sym]
@from_currency
conversion_rate
n
c
q
amoc
n
args[:amount]
args
q
c
args
@from_currency
n
c
args
q
hsh['price']
hsh['currency']
q
CONVERSION_RATES_TO_EURO[@from_currency.to_sym]
c
CurrencyConverter.call(from_currency: hsh['currency'], to_currency: 'EURO', amount: hsh['price'])
c
CurrencyConverter.call(from_currency: hsh['currency'], to_currency: 'EURO', amount: hsh['price'])
n
@return_value
c
cc
c
args
c
hsh
hsh['currency']
CurrencyConverter.call(from_currency: hsh['currency'], to_currency: 'EURO', amount: hsh['price'])
c
$ex
c
          &.sort_by { |hsh| hsh['conversion_amount'] }c
c
xxx = @xml_content['data']['Creatives']
          &.map { |hsh| hsh['conversion_amount'] = CurrencyConverter.call(from_currency: hash['currency'], to_currency: 'EURO', amount: hsh['price']) }
          &.sort_by { |hsh| hsh['conversion_amount'] }
xxx = @xml_content['data']['Creatives']
          &.map! { |hsh| hsh['conversion_amount'] = CurrencyConverter.call(from_currency: hash['currency'], to_currency: 'EURO', amount: hsh['price']) }
          &.sort_by! { |hsh| hsh['conversion_amount'] }
@xml_content['data']
@xml_content['data']['creatives']
xxx
xxx = @xml_content['data']['creatives']
          &.map! { |hsh| hsh['conversion_amount'] = CurrencyConverter.call(from_currency: hash['currency'], to_currency: 'EURO', amount: hsh['price']) }
          &.sort_by! { |hsh| hsh['conversion_amount'] }
@xml_content['data']['creatives']
          &.map! { |hsh| hsh['conversion_amount'] = CurrencyConverter.call(from_currency: hash['currency'], to_currency: 'EURO', amount: hsh['price']) }
          &.sort_by! { |hsh| hsh['conversion_amount'] }
c
$ex.inspect
$ex.to_inspect
$ex
c
@xml_content.with_indifferent_access[:data]
@xml_content.with_indifferent_access
@xml_content[:data].with_indifferent_access
@xml_content['data']
@xml_content[:data]
@xml_content[:data][:creatives]
      &.map! { |hsh| hsh[:conversion_amount] = CurrencyConverter.call(from_currency: hash[:currency], to_currency: 'EURO', amount: hsh[:price]) }
      &.sort_by! { |hsh| hsh[:currency] }
@xml_content[:data].[:creatives]
      &.map! { |hsh| hsh[:conversion_amount] = CurrencyConverter.call(from_currency: hash[:currency], to_currency: 'EURO', amount: hsh[:price]) }
      &.sort_by! { |hsh| hsh[:currency] }
@xml_content[:data]&.[:creatives]
      &.map! { |hsh| hsh[:conversion_amount] = CurrencyConverter.call(from_currency: hash[:currency], to_currency: 'EURO', amount: hsh[:price]) }
      &.sort_by! { |hsh| hsh[:currency] }
@xml_content
n
c
Hash.from_xml(File.read(@file_path))
c
Hash.from_xml(File.read(@file_path))
c
Hash.from_xml(File.read(@file_path))
$ex
c
Hash.from_xml(File.read(@file_path))
c
from_xml(File.read(@file_path))
c
@xml_content
c
@xml_content
c
@xml_content
c
@xml_content
$ex
@ex
c
Nori.new(:convert_tags_to => lambda { |tag| tag.snakecase.to_sym }).parse(File.open(@file_path))
Nori.new(:convert_tags_to => lambda { |tag| tag.snakecase.to_sym }).parse(File.read(@file_path))
Nori.new.parse(File.read(@file_path).to_s)
Nori.new.parse(File.open(@file_path).to_s)
Nori.new.parse(File.open(@file_path))
Nori.new.parse(File.read(@file_path))
Nori.new.parse(File.read(@file_path)
File.read(@file_path)
@xml_content
c
$ex
c
$ex
c
parser = XML::Reader.string(File.read(@file_path), :encoding => XML::Encoding::UTF_8,
                                :options => ( XML::Parser::Options::NOENT | XML::Parser::Options::NOBLANKS))
$ex
c
$ex
c
$ex
c
$ex
@file_path
c
__dir__
File.file?(@file_path)
File.read(@file_path)
$ex
c
$ex
c
n
c
$ex
c
n
file_path
n
args
c
args
